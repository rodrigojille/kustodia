{
  "language": "Solidity",
  "sources": {
    "contracts/KustodiaEscrow.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract KustodiaEscrow is Ownable {\n    IERC20 public mxnbToken;\n    address public platformWallet;\n    uint256 public constant FEE_BPS = 150; // 1.5% fee (basis points)\n\n    enum EscrowStatus { Active, Released, Disputed, Resolved, Refunded }\n\n    struct Escrow {\n        address buyer;\n        address seller;\n        uint256 totalAmount;\n        uint256 custodyAmount;\n        uint256 releaseAmount;\n        uint256 feeAmount;\n        uint256 custodyEnd;\n        EscrowStatus status;\n    }\n\n    uint256 public escrowCounter;\n    mapping(uint256 => Escrow) public escrows;\n\n    event EscrowCreated(uint256 indexed escrowId, address indexed buyer, address indexed seller, uint256 totalAmount, uint256 custodyAmount, uint256 releaseAmount, uint256 feeAmount, uint256 custodyEnd);\n    event ImmediateRelease(uint256 indexed escrowId, uint256 amount, address to);\n    event CustodyReleased(uint256 indexed escrowId, uint256 amount, address to);\n    event DisputeRaised(uint256 indexed escrowId, address by);\n    event DisputeResolved(uint256 indexed escrowId, bool releasedToSeller);\n\n    constructor(address _mxnbToken, address _platformWallet) {\n        mxnbToken = IERC20(_mxnbToken);\n        platformWallet = _platformWallet;\n    }\n\n    function createEscrow(\n        address seller,\n        uint256 totalAmount,\n        uint256 custodyPercent, // e.g. 10 for 10%\n        uint256 custodyPeriod // in seconds\n    ) external {\n        require(custodyPercent <= 100, \"Invalid custody percent\");\n        require(totalAmount > 0, \"Amount must be > 0\");\n\n        uint256 feeAmount = (totalAmount * FEE_BPS) / 10000;\n        uint256 custodyAmount = (totalAmount * custodyPercent) / 100;\n        uint256 releaseAmount = totalAmount - custodyAmount - feeAmount;\n\n        // Transfer MXNB from buyer to contract\n        require(mxnbToken.transferFrom(msg.sender, address(this), totalAmount), \"Token transfer failed\");\n\n        // Transfer fee to platform wallet\n        require(mxnbToken.transfer(platformWallet, feeAmount), \"Fee transfer failed\");\n\n        // Immediately transfer releaseAmount to seller\n        if (releaseAmount > 0) {\n            require(mxnbToken.transfer(seller, releaseAmount), \"Immediate release failed\");\n            emit ImmediateRelease(escrowCounter, releaseAmount, seller);\n        }\n\n        escrows[escrowCounter] = Escrow({\n            buyer: msg.sender,\n            seller: seller,\n            totalAmount: totalAmount,\n            custodyAmount: custodyAmount,\n            releaseAmount: releaseAmount,\n            feeAmount: feeAmount,\n            custodyEnd: block.timestamp + custodyPeriod,\n            status: EscrowStatus.Active\n        });\n\n        emit EscrowCreated(escrowCounter, msg.sender, seller, totalAmount, custodyAmount, releaseAmount, feeAmount, block.timestamp + custodyPeriod);\n        escrowCounter++;\n    }\n\n    function releaseCustody(uint256 escrowId) external onlyOwner {\n        Escrow storage esc = escrows[escrowId];\n        require(esc.status == EscrowStatus.Active, \"Not active\");\n        require(block.timestamp >= esc.custodyEnd, \"Custody period not ended\");\n\n        esc.status = EscrowStatus.Released;\n        require(mxnbToken.transfer(esc.seller, esc.custodyAmount), \"Custody release failed\");\n        emit CustodyReleased(escrowId, esc.custodyAmount, esc.seller);\n    }\n\n    function raiseDispute(uint256 escrowId) external {\n        Escrow storage esc = escrows[escrowId];\n        require(msg.sender == esc.buyer || msg.sender == esc.seller, \"Not participant\");\n        require(esc.status == EscrowStatus.Active, \"Not active\");\n\n        esc.status = EscrowStatus.Disputed;\n        emit DisputeRaised(escrowId, msg.sender);\n    }\n\n    function resolveDispute(uint256 escrowId, bool releaseToSeller) external onlyOwner {\n        Escrow storage esc = escrows[escrowId];\n        require(esc.status == EscrowStatus.Disputed, \"Not disputed\");\n\n        esc.status = EscrowStatus.Resolved;\n        if (releaseToSeller) {\n            require(mxnbToken.transfer(esc.seller, esc.custodyAmount), \"Release failed\");\n        } else {\n            require(mxnbToken.transfer(esc.buyer, esc.custodyAmount), \"Refund failed\");\n        }\n        emit DisputeResolved(escrowId, releaseToSeller);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": { "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}"},
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": { "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}"},
    "@openzeppelin/contracts/utils/Context.sol": { "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}"}
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },

    "outputSelection": {
      "*": {
        "*": ["abi", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers", "metadata"]
      },
      "": ["ast"]
    }
  }
}
